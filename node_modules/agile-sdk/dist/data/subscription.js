'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var subscription = function subscription(base) {
  base = base + '/subscription';
  return {
    /**
    * @summary Create subscription for device component
    * @name create
    * @public
    * @function
    * @memberof agile.data.subscription
    * @param deviceID {String} - Agile deviceID
    * @param componentID {String} - Agile componentID
    * @param [interval=3000] {Integer} - Subscription interval
    * @fulfil {Object}
    * @returns {Promise}
    *
    * @example
    * agile.data.subscription.create('mySensor', 'temperature', 3000)
    * .then(function(subscription) {
    *   console.log(subscription);
    * });
    **/
    create: function create(deviceID, componentID, interval) {
      interval = interval || 3000;
      return (0, _axios2.default)({
        method: 'POST',
        url: base,
        data: {
          deviceID: deviceID,
          componentID: componentID,
          interval: interval
        }
      }).then(function (res) {
        return res.data;
      }).catch(_utils.errorHandler);
    },
    /**
    * @summary Delete subscription for device component
    * @name delete
    * @public
    * @function
    * @memberof agile.data.subscription
    * @param deviceID {String} - Agile deviceID
    * @param componentID {String} - Agile componentID
    * @fulfil {null}
    * @returns {Promise}
    *
    * @example
    * agile.data.subscription.delete('mySensor', 'temperature')
    * .then(function(subscription) {
    *   console.log('Subscription deleted!');
    * });
    **/
    delete: function _delete(deviceID, componentID) {
      return (0, _axios2.default)({
        method: 'DELETE',
        url: base + '/' + deviceID + '/' + componentID
      }).then(function (res) {
        return res.data;
      }).catch(_utils.errorHandler);
    },
    /**
    * @summary Update subscription for device component
    * @name update
    * @public
    * @function
    * @memberof agile.data.subscription
    * @param deviceID {String} - Agile deviceID
    * @param componentID {String} - Agile componentID
    * @param [interval=3000] {Integer} - Subscription interval
    * @fulfil {Object}
    * @returns {Promise}
    *
    * @example
    * agile.data.subscription.update('mySensor', 'temperature')
    * .then(function(subscription) {
    *   console.log(subscription);
    * });
    **/
    update: function update(deviceID, componentID, interval) {
      interval = interval || 3000;

      return (0, _axios2.default)({
        method: 'PUT',
        url: base + '/' + deviceID + '/' + componentID,
        data: {
          interval: interval
        }
      }).then(function (res) {
        return res.data;
      }).catch(_utils.errorHandler);
    },
    /**
    * @summary Get subscription for device component or get all subscriptions on gateway
    * @name get
    * @public
    * @function
    * @memberof agile.data.subscription
    * @param [deviceID] {String} - Agile deviceID
    * @param [componentID] {String} - Agile componentID
    * @fulfil {Object|Array}
    * @returns {Promise}
    *
    * @example
    * agile.data.subscription.get('mySensor', 'temperature')
    * .then(function(subscription) {
    *   console.log(subscription);
    * });
    * agile.data.subscription.get()
    * .then(function(subscriptions) {
    *   console.log(subscriptions);
    * });
    **/
    get: function get(deviceID, componentID) {
      var url = void 0;
      if (deviceID && componentID) {
        url = base + '/' + deviceID + '/' + componentID;
      } else if (deviceID) {
        url = base + '/' + deviceID;
      } else {
        url = '' + base;
      }

      return (0, _axios2.default)({
        method: 'GET',
        url: url
      }).then(function (res) {
        return res.data;
      }).catch(_utils.errorHandler);
    }
  };
};

exports.default = subscription;